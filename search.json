[{"path":"https://glmgen.github.io/tvdenoising/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tvdenoising authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://glmgen.github.io/tvdenoising/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Addison Hu. Contributor. Daniel McDonald. Contributor. Ryan Tibshirani. Author, maintainer, copyright holder.","code":""},{"path":"https://glmgen.github.io/tvdenoising/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tibshirani R (2025). tvdenoising: Univariate Total Variation Denoising. R package version 1.0.0, https://github.com/glmgen/tvdenoising.","code":"@Manual{,   title = {tvdenoising: Univariate Total Variation Denoising},   author = {Ryan Tibshirani},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/glmgen/tvdenoising}, }"},{"path":"https://glmgen.github.io/tvdenoising/index.html","id":"tvdenoising","dir":"","previous_headings":"","what":"Univariate Total Variation Denoising","title":"Univariate Total Variation Denoising","text":"tvdenoising package provides implementation efficient linear-time dynamic programming algorithm univariate total variation denoising, due Johnson (2013), computes exact solution, given regularization level \\lambda. can also find concise explanation algorithm link.","code":""},{"path":"https://glmgen.github.io/tvdenoising/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Univariate Total Variation Denoising","text":"install released version CRAN: install development version GitHub:","code":"install.packages(\"tvdenoising\") # install.packages(\"pak\") pak::pak(\"glmgen/tvdenoising\")"},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tvdenoising: Univariate Total Variation Denoising — tvdenoising-package","title":"tvdenoising: Univariate Total Variation Denoising — tvdenoising-package","text":"Total variation denoising can used approximate given sequence noisy observations piecewise constant sequence, adaptively-chosen break points. efficient linear-time algorithm total variation denoising provided , based Johnson (2013) doi:10.1080/10618600.2012.681238 .","code":""},{"path":[]},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tvdenoising: Univariate Total Variation Denoising — tvdenoising-package","text":"Maintainer: Ryan Tibshirani ryantibs@gmail.com [copyright holder] contributors: Addison Hu [contributor] Daniel McDonald [contributor]","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate total variation denoising — tvdenoising","title":"Univariate total variation denoising — tvdenoising","text":"Denoises sequence observations solving univariate total variation denoising optimization problem given regularization level.","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate total variation denoising — tvdenoising","text":"","code":"tvdenoising(y, lambda, weights = NULL)"},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate total variation denoising — tvdenoising","text":"y Vector observations denoised. lambda Regularization parameter value. Must >= 0. weights Vector observation weights. default NULL, corresponds unity weights. vector must length y.","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate total variation denoising — tvdenoising","text":"Vector denoised observations.","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Univariate total variation denoising — tvdenoising","text":"function minimizes univariate total variation denoising (also called fused lasso) criterion squares criterion $$   \\frac{1}{2} \\sum_{=1}^n (y_i - \\theta_i)^2 +     \\lambda \\sum_{=1}^{n-1} |\\theta_{+1} - \\theta_i|,   $$ \\(\\theta\\). special structured convex optimization problem can solved linear time (\\(O(n)\\) operations) using algorithms based dynamic programming (Viterbi) taut string methods. current function implements highly-efficient dynamic programming method developed Johnson (2013).","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Univariate total variation denoising — tvdenoising","text":"Johnson (2013), \"dynamic programming algorithm fused lasso L0-segmentation.\"","code":""},{"path":"https://glmgen.github.io/tvdenoising/reference/tvdenoising.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate total variation denoising — tvdenoising","text":"","code":"y <- c(rep(0, 50), rep(3, 50)) + rnorm(100) yhat <- tvdenoising(y, 5) plot(y, pch = 16, col = \"gray60\") lines(yhat, col = \"firebrick\", lwd = 2)"}]
