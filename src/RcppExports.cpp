// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tvdenoising.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// flsa_dp
NumericVector flsa_dp(NumericVector y, double lambda);
static SEXP _tvdenoising_flsa_dp_try(SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(flsa_dp(y, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tvdenoising_flsa_dp(SEXP ySEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tvdenoising_flsa_dp_try(ySEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// flsa_dp_weighted
NumericVector flsa_dp_weighted(NumericVector y, double lambda, NumericVector weights);
static SEXP _tvdenoising_flsa_dp_weighted_try(SEXP ySEXP, SEXP lambdaSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(flsa_dp_weighted(y, lambda, weights));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tvdenoising_flsa_dp_weighted(SEXP ySEXP, SEXP lambdaSEXP, SEXP weightsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tvdenoising_flsa_dp_weighted_try(ySEXP, lambdaSEXP, weightsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rcpp_tvd
NumericVector rcpp_tvd(NumericVector y, double lambda);
RcppExport SEXP _tvdenoising_rcpp_tvd(SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_tvd(y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_wtvd
NumericVector rcpp_wtvd(NumericVector y, double lambda, NumericVector weights);
RcppExport SEXP _tvdenoising_rcpp_wtvd(SEXP ySEXP, SEXP lambdaSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_wtvd(y, lambda, weights));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _tvdenoising_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("NumericVector(*flsa_dp)(NumericVector,double)");
        signatures.insert("NumericVector(*flsa_dp_weighted)(NumericVector,double,NumericVector)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tvdenoising_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tvdenoising", "_tvdenoising_flsa_dp", (DL_FUNC)_tvdenoising_flsa_dp_try);
    R_RegisterCCallable("tvdenoising", "_tvdenoising_flsa_dp_weighted", (DL_FUNC)_tvdenoising_flsa_dp_weighted_try);
    R_RegisterCCallable("tvdenoising", "_tvdenoising_RcppExport_validate", (DL_FUNC)_tvdenoising_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_tvdenoising_flsa_dp", (DL_FUNC) &_tvdenoising_flsa_dp, 2},
    {"_tvdenoising_flsa_dp_weighted", (DL_FUNC) &_tvdenoising_flsa_dp_weighted, 3},
    {"_tvdenoising_rcpp_tvd", (DL_FUNC) &_tvdenoising_rcpp_tvd, 2},
    {"_tvdenoising_rcpp_wtvd", (DL_FUNC) &_tvdenoising_rcpp_wtvd, 3},
    {"_tvdenoising_RcppExport_registerCCallable", (DL_FUNC) &_tvdenoising_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tvdenoising(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
